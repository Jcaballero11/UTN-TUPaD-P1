#1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa 
#funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros 
#entre 1 y el n√∫mero que indique el usuario
def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)

# Solicitar al usuario un n√∫mero entero positivo
num = int(input("Introduce un n√∫mero entero positivo: "))

# Calcular e imprimir el factorial de todos los n√∫meros del 1 al num
for i in range(1, num + 1):
    print(f"Factorial de {i} es {factorial(i)}")

#2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n 
#indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario
#especifique.
def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

# Solicitar al usuario la posici√≥n hasta la cual mostrar la serie
n = int(input("Introduce la posici√≥n hasta la cual mostrar la serie de Fibonacci: "))

# Mostrar la serie de Fibonacci hasta la posici√≥n n
print("Serie de Fibonacci:")
for i in range(n + 1):
    print(f"Fibonacci({i}) = {fibonacci(i)}")

#3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un 
#exponente, utilizando la f√≥rmula ùëõ
#ùëö = ùëõ ‚àó ùëõ
#(ùëö‚àí1)
#. Prueba esta funci√≥n en un 
#algoritmo general.
def potencia(base, exponente):
    if exponente == 0:
        return 1
    else:
        return base * potencia(base, exponente - 1)

# Solicitar datos al usuario
base = float(input("Introduce la base: "))
exponente = int(input("Introduce el exponente (entero no negativo): "))

resultado = potencia(base, exponente)
print(f"{base} elevado a la {exponente} es igual a {resultado}")

#4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base 
#decimal y devuelva su representaci√≥n en binario como una cadena de texto.
def decimal_a_binario(n):
    if n == 0:
        return ""
    else:
        return decimal_a_binario(n // 2) + str(n % 2)

# Solicitar un n√∫mero entero positivo al usuario
numero = int(input("Introduce un n√∫mero entero positivo: "))

# Validar que el n√∫mero sea positivo
if numero < 0:
    print("Por favor, introduce un n√∫mero entero positivo.")
elif numero == 0:
    print("La representaci√≥n binaria de 0 es: 0")
else:
    binario = decimal_a_binario(numero)
    print(f"La representaci√≥n binaria de {numero} es: {binario}")

#5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una 
#cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no 
#lo es.
# Requisitos:
#La soluci√≥n debe ser recursiva.
#No se debe usar [::-1] ni la funci√≥n reversed().
def es_palindromo(palabra):
    #si la palabra tiene 0 o 1 letra, es un pal√≠ndromo
    if len(palabra) <= 1:
        return True
    # Si los extremos no coinciden, no es pal√≠ndromo
    if palabra[0] != palabra[-1]:
        return False
    return es_palindromo(palabra[1:-1])

texto = input("Introduce una palabra (sin espacios ni tildes): ").lower()

if es_palindromo(texto):
    print(f"'{texto}' es un pal√≠ndromo.")
else:
    print(f"'{texto}' no es un pal√≠ndromo.")

